// ==============================================================
// Generated by Vitis HLS v2024.1.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module scaffold_fn_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_val,
        coeffs_address0,
        coeffs_ce0,
        coeffs_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x_val;
output  [2:0] coeffs_address0;
output   coeffs_ce0;
input  [31:0] coeffs_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] float_exception_flags_1;
reg   [7:0] countLeadingZerosHigh_address0;
reg    countLeadingZerosHigh_ce0;
wire   [3:0] countLeadingZerosHigh_q0;
wire   [31:0] grp_float32_mul_fu_135_ap_return;
reg   [31:0] reg_183;
wire    ap_CS_fsm_state2;
wire    grp_float32_mul_fu_135_ap_done;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state26;
reg   [31:0] reg_191;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_addFloat32Sigs_fu_147_ap_return;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_subFloat32Sigs_fu_160_ap_return;
reg   [31:0] val_12_reg_271;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [31:0] val_13_reg_282;
wire    ap_CS_fsm_state7;
reg   [31:0] val_4_reg_292;
wire   [0:0] tmp_2_fu_212_p3;
reg   [0:0] tmp_2_reg_298;
wire   [0:0] xor_ln1428_fu_220_p2;
reg   [0:0] xor_ln1428_reg_304;
reg   [0:0] tmp_8_reg_313;
wire   [0:0] xor_ln1428_1_fu_234_p2;
reg   [0:0] xor_ln1428_1_reg_320;
reg   [0:0] tmp_11_reg_329;
wire   [0:0] xor_ln1428_2_fu_247_p2;
reg   [0:0] xor_ln1428_2_reg_336;
reg   [0:0] tmp_13_reg_345;
wire   [0:0] xor_ln1428_3_fu_260_p2;
reg   [0:0] xor_ln1428_3_reg_352;
wire    grp_float32_mul_fu_135_ap_start;
wire    grp_float32_mul_fu_135_ap_idle;
wire    grp_float32_mul_fu_135_ap_ready;
reg   [31:0] grp_float32_mul_fu_135_a;
reg   [31:0] grp_float32_mul_fu_135_b;
wire   [7:0] grp_float32_mul_fu_135_float_exception_flags_1_o;
wire    grp_float32_mul_fu_135_float_exception_flags_1_o_ap_vld;
wire   [7:0] grp_float32_mul_fu_135_countLeadingZerosHigh_address0;
wire    grp_float32_mul_fu_135_countLeadingZerosHigh_ce0;
wire    grp_addFloat32Sigs_fu_147_ap_start;
wire    grp_addFloat32Sigs_fu_147_ap_done;
wire    grp_addFloat32Sigs_fu_147_ap_idle;
wire    grp_addFloat32Sigs_fu_147_ap_ready;
reg   [31:0] grp_addFloat32Sigs_fu_147_a;
reg   [31:0] grp_addFloat32Sigs_fu_147_b;
reg   [0:0] grp_addFloat32Sigs_fu_147_zSign;
wire   [7:0] grp_addFloat32Sigs_fu_147_float_exception_flags_1_o;
wire    grp_addFloat32Sigs_fu_147_float_exception_flags_1_o_ap_vld;
wire    grp_subFloat32Sigs_fu_160_ap_start;
wire    grp_subFloat32Sigs_fu_160_ap_done;
wire    grp_subFloat32Sigs_fu_160_ap_idle;
wire    grp_subFloat32Sigs_fu_160_ap_ready;
reg   [31:0] grp_subFloat32Sigs_fu_160_a;
reg   [31:0] grp_subFloat32Sigs_fu_160_b;
reg   [0:0] grp_subFloat32Sigs_fu_160_zSign;
wire   [7:0] grp_subFloat32Sigs_fu_160_float_exception_flags_1_o;
wire    grp_subFloat32Sigs_fu_160_float_exception_flags_1_o_ap_vld;
wire   [7:0] grp_subFloat32Sigs_fu_160_countLeadingZerosHigh_address0;
wire    grp_subFloat32Sigs_fu_160_countLeadingZerosHigh_ce0;
reg   [31:0] val_5_reg_96;
reg    ap_block_state10_on_subcall_done;
reg   [31:0] val_7_reg_106;
reg    ap_block_state16_on_subcall_done;
reg   [31:0] val_9_reg_116;
reg    ap_block_state22_on_subcall_done;
reg   [31:0] ap_phi_mux_val_phi_fu_129_p4;
wire    ap_CS_fsm_state28;
reg    ap_block_state28_on_subcall_done;
reg    grp_float32_mul_fu_135_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
reg    grp_addFloat32Sigs_fu_147_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state27;
reg    grp_subFloat32Sigs_fu_160_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state29;
reg    coeffs_ce0_local;
reg   [2:0] coeffs_address0_local;
wire   [0:0] grp_fu_175_p3;
reg   [31:0] ap_return_preg;
reg   [28:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 float_exception_flags_1 = 8'd0;
#0 grp_float32_mul_fu_135_ap_start_reg = 1'b0;
#0 grp_addFloat32Sigs_fu_147_ap_start_reg = 1'b0;
#0 grp_subFloat32Sigs_fu_160_ap_start_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

scaffold_fn_top_countLeadingZerosHigh_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
countLeadingZerosHigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(countLeadingZerosHigh_address0),
    .ce0(countLeadingZerosHigh_ce0),
    .q0(countLeadingZerosHigh_q0)
);

scaffold_fn_float32_mul grp_float32_mul_fu_135(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_float32_mul_fu_135_ap_start),
    .ap_done(grp_float32_mul_fu_135_ap_done),
    .ap_idle(grp_float32_mul_fu_135_ap_idle),
    .ap_ready(grp_float32_mul_fu_135_ap_ready),
    .a(grp_float32_mul_fu_135_a),
    .b(grp_float32_mul_fu_135_b),
    .float_exception_flags_1_i(float_exception_flags_1),
    .float_exception_flags_1_o(grp_float32_mul_fu_135_float_exception_flags_1_o),
    .float_exception_flags_1_o_ap_vld(grp_float32_mul_fu_135_float_exception_flags_1_o_ap_vld),
    .countLeadingZerosHigh_address0(grp_float32_mul_fu_135_countLeadingZerosHigh_address0),
    .countLeadingZerosHigh_ce0(grp_float32_mul_fu_135_countLeadingZerosHigh_ce0),
    .countLeadingZerosHigh_q0(countLeadingZerosHigh_q0),
    .ap_return(grp_float32_mul_fu_135_ap_return)
);

scaffold_fn_addFloat32Sigs grp_addFloat32Sigs_fu_147(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_addFloat32Sigs_fu_147_ap_start),
    .ap_done(grp_addFloat32Sigs_fu_147_ap_done),
    .ap_idle(grp_addFloat32Sigs_fu_147_ap_idle),
    .ap_ready(grp_addFloat32Sigs_fu_147_ap_ready),
    .a(grp_addFloat32Sigs_fu_147_a),
    .b(grp_addFloat32Sigs_fu_147_b),
    .zSign(grp_addFloat32Sigs_fu_147_zSign),
    .float_exception_flags_1_i(float_exception_flags_1),
    .float_exception_flags_1_o(grp_addFloat32Sigs_fu_147_float_exception_flags_1_o),
    .float_exception_flags_1_o_ap_vld(grp_addFloat32Sigs_fu_147_float_exception_flags_1_o_ap_vld),
    .ap_return(grp_addFloat32Sigs_fu_147_ap_return)
);

scaffold_fn_subFloat32Sigs grp_subFloat32Sigs_fu_160(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_subFloat32Sigs_fu_160_ap_start),
    .ap_done(grp_subFloat32Sigs_fu_160_ap_done),
    .ap_idle(grp_subFloat32Sigs_fu_160_ap_idle),
    .ap_ready(grp_subFloat32Sigs_fu_160_ap_ready),
    .a(grp_subFloat32Sigs_fu_160_a),
    .b(grp_subFloat32Sigs_fu_160_b),
    .zSign(grp_subFloat32Sigs_fu_160_zSign),
    .float_exception_flags_1_i(float_exception_flags_1),
    .float_exception_flags_1_o(grp_subFloat32Sigs_fu_160_float_exception_flags_1_o),
    .float_exception_flags_1_o_ap_vld(grp_subFloat32Sigs_fu_160_float_exception_flags_1_o_ap_vld),
    .countLeadingZerosHigh_address0(grp_subFloat32Sigs_fu_160_countLeadingZerosHigh_address0),
    .countLeadingZerosHigh_ce0(grp_subFloat32Sigs_fu_160_countLeadingZerosHigh_ce0),
    .countLeadingZerosHigh_q0(countLeadingZerosHigh_q0),
    .ap_return(grp_subFloat32Sigs_fu_160_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_state28_on_subcall_done) & (1'b1 == ap_CS_fsm_state28))) begin
            ap_return_preg <= ap_phi_mux_val_phi_fu_129_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_addFloat32Sigs_fu_147_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
            grp_addFloat32Sigs_fu_147_ap_start_reg <= 1'b1;
        end else if ((grp_addFloat32Sigs_fu_147_ap_ready == 1'b1)) begin
            grp_addFloat32Sigs_fu_147_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_float32_mul_fu_135_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_float32_mul_fu_135_ap_start_reg <= 1'b1;
        end else if ((grp_float32_mul_fu_135_ap_ready == 1'b1)) begin
            grp_float32_mul_fu_135_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_subFloat32Sigs_fu_160_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11))) begin
            grp_subFloat32Sigs_fu_160_ap_start_reg <= 1'b1;
        end else if ((grp_subFloat32Sigs_fu_160_ap_ready == 1'b1)) begin
            grp_subFloat32Sigs_fu_160_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_subFloat32Sigs_fu_160_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd1)) | ((grp_subFloat32Sigs_fu_160_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd1)) | ((grp_subFloat32Sigs_fu_160_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd1)) | ((grp_subFloat32Sigs_fu_160_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd1)))) begin
        float_exception_flags_1 <= grp_subFloat32Sigs_fu_160_float_exception_flags_1_o;
    end else if ((((grp_addFloat32Sigs_fu_147_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd0)) | ((grp_addFloat32Sigs_fu_147_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd0)) | ((grp_addFloat32Sigs_fu_147_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd0)) | ((grp_addFloat32Sigs_fu_147_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd0)))) begin
        float_exception_flags_1 <= grp_addFloat32Sigs_fu_147_float_exception_flags_1_o;
    end else if ((((grp_float32_mul_fu_135_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((grp_float32_mul_fu_135_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_float32_mul_fu_135_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_float32_mul_fu_135_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((grp_float32_mul_fu_135_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((grp_float32_mul_fu_135_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_float32_mul_fu_135_float_exception_flags_1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        float_exception_flags_1 <= grp_float32_mul_fu_135_float_exception_flags_1_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        if ((xor_ln1428_reg_304 == 1'd1)) begin
            val_5_reg_96 <= grp_subFloat32Sigs_fu_160_ap_return;
        end else if ((xor_ln1428_reg_304 == 1'd0)) begin
            val_5_reg_96 <= grp_addFloat32Sigs_fu_147_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state16_on_subcall_done) & (1'b1 == ap_CS_fsm_state16))) begin
        if ((xor_ln1428_1_reg_320 == 1'd1)) begin
            val_7_reg_106 <= grp_subFloat32Sigs_fu_160_ap_return;
        end else if ((xor_ln1428_1_reg_320 == 1'd0)) begin
            val_7_reg_106 <= grp_addFloat32Sigs_fu_147_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state22_on_subcall_done) & (1'b1 == ap_CS_fsm_state22))) begin
        if ((xor_ln1428_2_reg_336 == 1'd1)) begin
            val_9_reg_116 <= grp_subFloat32Sigs_fu_160_ap_return;
        end else if ((xor_ln1428_2_reg_336 == 1'd0)) begin
            val_9_reg_116 <= grp_addFloat32Sigs_fu_147_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_183 <= grp_float32_mul_fu_135_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state12) | ((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        reg_191 <= coeffs_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_11_reg_329 <= val_7_reg_106[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_13_reg_345 <= val_9_reg_116[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_2_reg_298 <= coeffs_q0[32'd31];
        val_4_reg_292 <= grp_float32_mul_fu_135_ap_return;
        xor_ln1428_reg_304 <= xor_ln1428_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_8_reg_313 <= val_5_reg_96[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        val_12_reg_271 <= grp_float32_mul_fu_135_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        val_13_reg_282 <= grp_float32_mul_fu_135_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        xor_ln1428_1_reg_320 <= xor_ln1428_1_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        xor_ln1428_2_reg_336 <= xor_ln1428_2_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        xor_ln1428_3_reg_352 <= xor_ln1428_3_fu_260_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state10_on_subcall_done)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_float32_mul_fu_135_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state16_on_subcall_done)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_float32_mul_fu_135_ap_done == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state22_on_subcall_done)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

always @ (*) begin
    if ((grp_float32_mul_fu_135_ap_done == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

assign ap_ST_fsm_state27_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state28_on_subcall_done)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((grp_float32_mul_fu_135_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_float32_mul_fu_135_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_float32_mul_fu_135_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((grp_float32_mul_fu_135_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state28_on_subcall_done) & (1'b1 == ap_CS_fsm_state28)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        if ((xor_ln1428_3_reg_352 == 1'd1)) begin
            ap_phi_mux_val_phi_fu_129_p4 = grp_subFloat32Sigs_fu_160_ap_return;
        end else if ((xor_ln1428_3_reg_352 == 1'd0)) begin
            ap_phi_mux_val_phi_fu_129_p4 = grp_addFloat32Sigs_fu_147_ap_return;
        end else begin
            ap_phi_mux_val_phi_fu_129_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_val_phi_fu_129_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state28_on_subcall_done) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state28_on_subcall_done) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_return = ap_phi_mux_val_phi_fu_129_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        coeffs_address0_local = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        coeffs_address0_local = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        coeffs_address0_local = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        coeffs_address0_local = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        coeffs_address0_local = 64'd1;
    end else begin
        coeffs_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_state22_on_subcall_done) & (1'b1 == ap_CS_fsm_state22)) | ((1'b0 == ap_block_state16_on_subcall_done) & (1'b1 == ap_CS_fsm_state16)) | ((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10)))) begin
        coeffs_ce0_local = 1'b1;
    end else begin
        coeffs_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd1)) | ((1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd1)) | ((1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd1)) | ((1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd1)))) begin
        countLeadingZerosHigh_address0 = grp_subFloat32Sigs_fu_160_countLeadingZerosHigh_address0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        countLeadingZerosHigh_address0 = grp_float32_mul_fu_135_countLeadingZerosHigh_address0;
    end else begin
        countLeadingZerosHigh_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd1)) | ((1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd1)) | ((1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd1)) | ((1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd1)))) begin
        countLeadingZerosHigh_ce0 = grp_subFloat32Sigs_fu_160_countLeadingZerosHigh_ce0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        countLeadingZerosHigh_ce0 = grp_float32_mul_fu_135_countLeadingZerosHigh_ce0;
    end else begin
        countLeadingZerosHigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd0))) begin
        grp_addFloat32Sigs_fu_147_a = val_9_reg_116;
    end else if (((1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd0))) begin
        grp_addFloat32Sigs_fu_147_a = val_7_reg_106;
    end else if (((1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd0))) begin
        grp_addFloat32Sigs_fu_147_a = val_5_reg_96;
    end else if (((1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd0))) begin
        grp_addFloat32Sigs_fu_147_a = reg_191;
    end else begin
        grp_addFloat32Sigs_fu_147_a = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd0)) | ((1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd0)) | ((1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd0)))) begin
        grp_addFloat32Sigs_fu_147_b = reg_183;
    end else if (((1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd0))) begin
        grp_addFloat32Sigs_fu_147_b = val_4_reg_292;
    end else begin
        grp_addFloat32Sigs_fu_147_b = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd0))) begin
        grp_addFloat32Sigs_fu_147_zSign = tmp_13_reg_345;
    end else if (((1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd0))) begin
        grp_addFloat32Sigs_fu_147_zSign = tmp_11_reg_329;
    end else if (((1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd0))) begin
        grp_addFloat32Sigs_fu_147_zSign = tmp_8_reg_313;
    end else if (((1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd0))) begin
        grp_addFloat32Sigs_fu_147_zSign = tmp_2_reg_298;
    end else begin
        grp_addFloat32Sigs_fu_147_zSign = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_float32_mul_fu_135_a = reg_191;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_float32_mul_fu_135_a = val_12_reg_271;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_float32_mul_fu_135_a = reg_183;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_float32_mul_fu_135_a = x_val;
    end else begin
        grp_float32_mul_fu_135_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_float32_mul_fu_135_b = val_13_reg_282;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_float32_mul_fu_135_b = val_12_reg_271;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_float32_mul_fu_135_b = reg_183;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_float32_mul_fu_135_b = x_val;
    end else begin
        grp_float32_mul_fu_135_b = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd1))) begin
        grp_subFloat32Sigs_fu_160_a = val_9_reg_116;
    end else if (((1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd1))) begin
        grp_subFloat32Sigs_fu_160_a = val_7_reg_106;
    end else if (((1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd1))) begin
        grp_subFloat32Sigs_fu_160_a = val_5_reg_96;
    end else if (((1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd1))) begin
        grp_subFloat32Sigs_fu_160_a = reg_191;
    end else begin
        grp_subFloat32Sigs_fu_160_a = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd1)) | ((1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd1)) | ((1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd1)))) begin
        grp_subFloat32Sigs_fu_160_b = reg_183;
    end else if (((1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd1))) begin
        grp_subFloat32Sigs_fu_160_b = val_4_reg_292;
    end else begin
        grp_subFloat32Sigs_fu_160_b = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (xor_ln1428_3_reg_352 == 1'd1))) begin
        grp_subFloat32Sigs_fu_160_zSign = tmp_13_reg_345;
    end else if (((1'b1 == ap_CS_fsm_state22) & (xor_ln1428_2_reg_336 == 1'd1))) begin
        grp_subFloat32Sigs_fu_160_zSign = tmp_11_reg_329;
    end else if (((1'b1 == ap_CS_fsm_state16) & (xor_ln1428_1_reg_320 == 1'd1))) begin
        grp_subFloat32Sigs_fu_160_zSign = tmp_8_reg_313;
    end else if (((1'b1 == ap_CS_fsm_state10) & (xor_ln1428_reg_304 == 1'd1))) begin
        grp_subFloat32Sigs_fu_160_zSign = tmp_2_reg_298;
    end else begin
        grp_subFloat32Sigs_fu_160_zSign = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8) & (xor_ln1428_fu_220_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8) & (xor_ln1428_fu_220_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14) & (xor_ln1428_1_fu_234_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14) & (xor_ln1428_1_fu_234_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b0 == ap_block_state16_on_subcall_done) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20) & (xor_ln1428_2_fu_247_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20) & (xor_ln1428_2_fu_247_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b0 == ap_block_state22_on_subcall_done) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26) & (xor_ln1428_3_fu_260_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((grp_float32_mul_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26) & (xor_ln1428_3_fu_260_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b0 == ap_block_state28_on_subcall_done) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_on_subcall_done = (((grp_subFloat32Sigs_fu_160_ap_done == 1'b0) & (xor_ln1428_reg_304 == 1'd1)) | ((grp_addFloat32Sigs_fu_147_ap_done == 1'b0) & (xor_ln1428_reg_304 == 1'd0)));
end

always @ (*) begin
    ap_block_state16_on_subcall_done = (((grp_subFloat32Sigs_fu_160_ap_done == 1'b0) & (xor_ln1428_1_reg_320 == 1'd1)) | ((grp_addFloat32Sigs_fu_147_ap_done == 1'b0) & (xor_ln1428_1_reg_320 == 1'd0)));
end

always @ (*) begin
    ap_block_state22_on_subcall_done = (((grp_subFloat32Sigs_fu_160_ap_done == 1'b0) & (xor_ln1428_2_reg_336 == 1'd1)) | ((grp_addFloat32Sigs_fu_147_ap_done == 1'b0) & (xor_ln1428_2_reg_336 == 1'd0)));
end

always @ (*) begin
    ap_block_state28_on_subcall_done = (((grp_subFloat32Sigs_fu_160_ap_done == 1'b0) & (xor_ln1428_3_reg_352 == 1'd1)) | ((grp_addFloat32Sigs_fu_147_ap_done == 1'b0) & (xor_ln1428_3_reg_352 == 1'd0)));
end

assign coeffs_address0 = coeffs_address0_local;

assign coeffs_ce0 = coeffs_ce0_local;

assign grp_addFloat32Sigs_fu_147_ap_start = grp_addFloat32Sigs_fu_147_ap_start_reg;

assign grp_float32_mul_fu_135_ap_start = grp_float32_mul_fu_135_ap_start_reg;

assign grp_fu_175_p3 = grp_float32_mul_fu_135_ap_return[32'd31];

assign grp_subFloat32Sigs_fu_160_ap_start = grp_subFloat32Sigs_fu_160_ap_start_reg;

assign tmp_2_fu_212_p3 = coeffs_q0[32'd31];

assign xor_ln1428_1_fu_234_p2 = (tmp_8_reg_313 ^ grp_fu_175_p3);

assign xor_ln1428_2_fu_247_p2 = (tmp_11_reg_329 ^ grp_fu_175_p3);

assign xor_ln1428_3_fu_260_p2 = (tmp_13_reg_345 ^ grp_fu_175_p3);

assign xor_ln1428_fu_220_p2 = (tmp_2_fu_212_p3 ^ grp_fu_175_p3);

endmodule //scaffold_fn_top
