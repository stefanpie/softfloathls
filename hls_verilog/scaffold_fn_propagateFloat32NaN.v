// ==============================================================
// Generated by Vitis HLS v2024.1.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module scaffold_fn_propagateFloat32NaN (
        ap_ready,
        a,
        b,
        float_exception_flags_1_i,
        float_exception_flags_1_o,
        float_exception_flags_1_o_ap_vld,
        ap_return,
        ap_rst
);


output   ap_ready;
input  [31:0] a;
input  [31:0] b;
input  [7:0] float_exception_flags_1_i;
output  [7:0] float_exception_flags_1_o;
output   float_exception_flags_1_o_ap_vld;
output  [31:0] ap_return;
input   ap_rst;

reg[7:0] float_exception_flags_1_o;
reg float_exception_flags_1_o_ap_vld;

wire   [7:0] or_ln_fu_234_p3;
wire   [0:0] or_ln518_fu_214_p2;
wire   [31:0] shl_ln488_fu_78_p2;
wire   [8:0] tmp_s_fu_90_p4;
wire   [30:0] and_ln_fu_100_p3;
wire   [21:0] trunc_ln509_1_fu_74_p1;
wire   [0:0] icmp_ln492_fu_108_p2;
wire   [0:0] icmp_ln492_1_fu_114_p2;
wire   [31:0] shl_ln488_1_fu_126_p2;
wire   [8:0] tmp_9_fu_138_p4;
wire   [30:0] and_ln492_2_fu_148_p3;
wire   [21:0] trunc_ln509_fu_70_p1;
wire   [0:0] icmp_ln492_2_fu_156_p2;
wire   [0:0] icmp_ln492_3_fu_162_p2;
wire   [8:0] tmp_10_fu_174_p4;
wire   [8:0] tmp_11_fu_194_p4;
wire   [0:0] and_ln492_fu_120_p2;
wire   [0:0] and_ln492_1_fu_168_p2;
wire   [6:0] tmp_12_fu_224_p4;
wire   [0:0] icmp_ln488_1_fu_132_p2;
wire   [31:0] b_assign_fu_204_p4;
wire   [31:0] a_assign_fu_184_p4;
wire   [7:0] tmp_13_fu_256_p4;
wire   [7:0] tmp_14_fu_278_p4;
wire   [31:0] shl_ln1_fu_266_p5;
wire   [31:0] shl_ln528_1_fu_288_p5;
wire   [0:0] icmp_ln532_fu_306_p2;
wire   [0:0] and_ln492_3_fu_320_p2;
wire   [0:0] xor_ln492_fu_326_p2;
wire   [0:0] icmp_ln488_fu_84_p2;
wire   [0:0] and_ln525_fu_344_p2;
wire   [0:0] icmp_ln528_fu_300_p2;
wire   [0:0] and_ln528_fu_350_p2;
wire   [0:0] xor_ln488_fu_338_p2;
wire   [0:0] and_ln492_5_fu_362_p2;
wire   [0:0] or_ln528_fu_356_p2;
wire   [0:0] xor_ln492_1_fu_368_p2;
wire   [0:0] and_ln492_6_fu_380_p2;
wire   [0:0] and_ln528_1_fu_374_p2;
wire   [0:0] and_ln528_2_fu_386_p2;
wire   [0:0] and_ln525_1_fu_398_p2;
wire   [0:0] and_ln525_2_fu_404_p2;
wire   [0:0] icmp_ln530_fu_422_p2;
wire   [0:0] or_ln525_fu_410_p2;
wire   [0:0] xor_ln528_fu_416_p2;
wire   [0:0] and_ln525_3_fu_434_p2;
wire   [0:0] xor_ln530_fu_428_p2;
wire   [0:0] and_ln492_4_fu_332_p2;
wire   [0:0] or_ln528_1_fu_392_p2;
wire   [0:0] and_ln525_4_fu_440_p2;
wire   [31:0] retval_fu_456_p2;
wire   [31:0] retval_fu_456_p6;
wire   [31:0] retval_fu_456_p9;
wire   [2:0] retval_fu_456_p10;
wire   [2:0] sel_tmp_fu_446_p4;
wire   [31:0] retval_fu_456_p11;
wire  signed [2:0] retval_fu_456_p1;
wire   [2:0] retval_fu_456_p3;
wire   [2:0] retval_fu_456_p5;
wire   [2:0] retval_fu_456_p7;
wire    ap_ce_reg;

(* dissolve_hierarchy = "yes" *) scaffold_fn_sparsemux_9_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_9_3_32_1_1_U7(
    .din0(retval_fu_456_p2),
    .din1(b_assign_fu_204_p4),
    .din2(retval_fu_456_p6),
    .din3(a_assign_fu_184_p4),
    .def(retval_fu_456_p9),
    .sel(retval_fu_456_p10),
    .dout(retval_fu_456_p11)
);

always @ (*) begin
    if ((or_ln518_fu_214_p2 == 1'd1)) begin
        float_exception_flags_1_o = or_ln_fu_234_p3;
    end else begin
        float_exception_flags_1_o = float_exception_flags_1_i;
    end
end

always @ (*) begin
    if ((or_ln518_fu_214_p2 == 1'd1)) begin
        float_exception_flags_1_o_ap_vld = 1'b1;
    end else begin
        float_exception_flags_1_o_ap_vld = 1'b0;
    end
end

assign a_assign_fu_184_p4 = {{{tmp_10_fu_174_p4}, {1'd1}}, {trunc_ln509_1_fu_74_p1}};

assign and_ln492_1_fu_168_p2 = (icmp_ln492_3_fu_162_p2 & icmp_ln492_2_fu_156_p2);

assign and_ln492_2_fu_148_p3 = {{tmp_9_fu_138_p4}, {22'd0}};

assign and_ln492_3_fu_320_p2 = (icmp_ln492_3_fu_162_p2 & icmp_ln492_2_fu_156_p2);

assign and_ln492_4_fu_332_p2 = (xor_ln492_fu_326_p2 & and_ln492_fu_120_p2);

assign and_ln492_5_fu_362_p2 = (icmp_ln492_fu_108_p2 & icmp_ln492_1_fu_114_p2);

assign and_ln492_6_fu_380_p2 = (and_ln492_fu_120_p2 & and_ln492_1_fu_168_p2);

assign and_ln492_fu_120_p2 = (icmp_ln492_fu_108_p2 & icmp_ln492_1_fu_114_p2);

assign and_ln525_1_fu_398_p2 = (xor_ln492_1_fu_368_p2 & and_ln525_fu_344_p2);

assign and_ln525_2_fu_404_p2 = (icmp_ln488_fu_84_p2 & and_ln525_1_fu_398_p2);

assign and_ln525_3_fu_434_p2 = (xor_ln528_fu_416_p2 & or_ln525_fu_410_p2);

assign and_ln525_4_fu_440_p2 = (xor_ln530_fu_428_p2 & and_ln525_3_fu_434_p2);

assign and_ln525_fu_344_p2 = (xor_ln492_fu_326_p2 & icmp_ln488_1_fu_132_p2);

assign and_ln528_1_fu_374_p2 = (xor_ln492_1_fu_368_p2 & or_ln528_fu_356_p2);

assign and_ln528_2_fu_386_p2 = (icmp_ln528_fu_300_p2 & and_ln492_6_fu_380_p2);

assign and_ln528_fu_350_p2 = (icmp_ln528_fu_300_p2 & and_ln525_fu_344_p2);

assign and_ln_fu_100_p3 = {{tmp_s_fu_90_p4}, {22'd0}};

assign ap_ready = 1'b1;

assign b_assign_fu_204_p4 = {{{tmp_11_fu_194_p4}, {1'd1}}, {trunc_ln509_fu_70_p1}};

assign icmp_ln532_fu_306_p2 = ((a_assign_fu_184_p4 < b_assign_fu_204_p4) ? 1'b1 : 1'b0);

assign or_ln518_fu_214_p2 = (and_ln492_fu_120_p2 | and_ln492_1_fu_168_p2);

assign or_ln525_fu_410_p2 = (and_ln525_2_fu_404_p2 | and_ln492_6_fu_380_p2);

assign or_ln528_1_fu_392_p2 = (and_ln528_2_fu_386_p2 | and_ln528_1_fu_374_p2);

assign or_ln528_fu_356_p2 = (xor_ln488_fu_338_p2 | and_ln528_fu_350_p2);

assign or_ln_fu_234_p3 = {{tmp_12_fu_224_p4}, {1'd1}};

assign sel_tmp_fu_446_p4 = {{{and_ln492_4_fu_332_p2}, {or_ln528_1_fu_392_p2}}, {and_ln525_4_fu_440_p2}};

assign shl_ln1_fu_266_p5 = {{{{tmp_13_fu_256_p4}, {1'd1}}, {trunc_ln509_1_fu_74_p1}}, {1'd0}};

assign shl_ln488_1_fu_126_p2 = b << 32'd1;

assign shl_ln488_fu_78_p2 = a << 32'd1;

assign shl_ln528_1_fu_288_p5 = {{{{tmp_14_fu_278_p4}, {1'd1}}, {trunc_ln509_fu_70_p1}}, {1'd0}};

assign tmp_10_fu_174_p4 = {{a[31:23]}};

assign tmp_11_fu_194_p4 = {{b[31:23]}};

assign tmp_12_fu_224_p4 = {{float_exception_flags_1_i[7:1]}};

assign tmp_13_fu_256_p4 = {{a[30:23]}};

assign tmp_14_fu_278_p4 = {{b[30:23]}};

assign tmp_9_fu_138_p4 = {{b[30:22]}};

assign tmp_s_fu_90_p4 = {{a[30:22]}};

assign trunc_ln509_1_fu_74_p1 = a[21:0];

assign trunc_ln509_fu_70_p1 = b[21:0];

assign xor_ln488_fu_338_p2 = (icmp_ln488_fu_84_p2 ^ 1'd1);

assign xor_ln492_1_fu_368_p2 = (1'd1 ^ and_ln492_5_fu_362_p2);

assign xor_ln492_fu_326_p2 = (1'd1 ^ and_ln492_3_fu_320_p2);

assign xor_ln528_fu_416_p2 = (icmp_ln528_fu_300_p2 ^ 1'd1);

assign xor_ln530_fu_428_p2 = (icmp_ln530_fu_422_p2 ^ 1'd1);

assign ap_return = retval_fu_456_p11;

assign icmp_ln488_1_fu_132_p2 = ((shl_ln488_1_fu_126_p2 > 32'd4278190080) ? 1'b1 : 1'b0);

assign icmp_ln488_fu_84_p2 = ((shl_ln488_fu_78_p2 > 32'd4278190080) ? 1'b1 : 1'b0);

assign icmp_ln492_1_fu_114_p2 = ((trunc_ln509_1_fu_74_p1 != 22'd0) ? 1'b1 : 1'b0);

assign icmp_ln492_2_fu_156_p2 = ((and_ln492_2_fu_148_p3 == 31'd2139095040) ? 1'b1 : 1'b0);

assign icmp_ln492_3_fu_162_p2 = ((trunc_ln509_fu_70_p1 != 22'd0) ? 1'b1 : 1'b0);

assign icmp_ln492_fu_108_p2 = ((and_ln_fu_100_p3 == 31'd2139095040) ? 1'b1 : 1'b0);

assign icmp_ln528_fu_300_p2 = ((shl_ln1_fu_266_p5 < shl_ln528_1_fu_288_p5) ? 1'b1 : 1'b0);

assign icmp_ln530_fu_422_p2 = ((shl_ln528_1_fu_288_p5 < shl_ln1_fu_266_p5) ? 1'b1 : 1'b0);

assign retval_fu_456_p10 = {{{and_ln492_4_fu_332_p2}, {or_ln528_1_fu_392_p2}}, {and_ln525_4_fu_440_p2}};

assign retval_fu_456_p2 = ((icmp_ln488_1_fu_132_p2[0:0] == 1'b1) ? b_assign_fu_204_p4 : a_assign_fu_184_p4);

assign retval_fu_456_p6 = ((icmp_ln532_fu_306_p2[0:0] == 1'b1) ? a_assign_fu_184_p4 : b_assign_fu_204_p4);

assign retval_fu_456_p9 = 'bx;

endmodule //scaffold_fn_propagateFloat32NaN
